name: Reusable Security SAST scan (Detect vulnerabilities)

on:
  workflow_call

jobs:
  semgrep:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
      security-events: write
      actions: read

    defaults:
      run:
        shell: pwsh
        working-directory: .
        env:
          PYTHONIOENCODING: utf-8
          LC_ALL: C.UTF-8
          LANG: C.UTF-8

    steps:

      - name: üîß Force PowerShell UTF-8 globally
        shell: pwsh
        run: |
          chcp 65001 | Out-Null
          $OutputEncoding = [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          [System.Console]::InputEncoding = [System.Text.Encoding]::UTF8

      - name: üß™ List files 1
        run: dir

      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: üì¶ Install semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          semgrep --version

      - name: üì¶ Install jq if missing
        shell: pwsh
        run: |
          if (-not (Get-Command jq -ErrorAction SilentlyContinue)) {
            choco install jq -y
          }

      - name: üß™ List files 2
        run: dir

      - name: üÜî Generate unique random ID
        shell: pwsh
        run: |
          $rand = -join ((65..90 + 97..122 + 48..57) | Get-Random -Count 30 | ForEach-Object {[char]$_})
          Add-Content -Encoding UTF8 $env:GITHUB_ENV "UNIQ_STR=$rand"

      - name: ü´ô Store Perso Git URL
        shell: pwsh
        run: Add-Content -Encoding UTF8 $env:GITHUB_ENV "PERSO_GIT=https://github.com/BenGod1/"

      - name: üöÄ Run semgrep INFO
        shell: pwsh
        run: |
          semgrep --config=auto --encoding=utf-8 . `
            --sarif --sarif-output="output-$env:UNIQ_STR-info.json" --severity=INFO `
            --exclude-dir=node_modules --exclude-pattern="*.png" --exclude-pattern="*.jpg" --exclude-pattern="*.min.js"
          
          if (Test-Path "output-$env:UNIQ_STR-info.json") {
            jq '.runs[].results[] |= (.properties["security-severity"] = "1.0")' `
              "output-$env:UNIQ_STR-info.json" | Set-Content -Encoding utf8 "output-$env:UNIQ_STR-info.sarif"
          } else { Write-Host "INFO SARIF not generated, skipping"; exit 1 }

      - name: üöÄ Run semgrep WARNING
        shell: pwsh
        run: |
          semgrep --config=auto --encoding=utf-8 . `
            --sarif --sarif-output="output-$env:UNIQ_STR-warning.json" --severity=WARNING `
            --exclude-dir=node_modules --exclude-pattern="*.png" --exclude-pattern="*.jpg" --exclude-pattern="*.min.js"
          
          if (Test-Path "output-$env:UNIQ_STR-warning.json") {
            jq '.runs[].results[] |= (.properties["security-severity"] = "5.0")' `
              "output-$env:UNIQ_STR-warning.json" | Set-Content -Encoding utf8 "output-$env:UNIQ_STR-warning.sarif"
          } else { Write-Host "WARNING SARIF not generated, skipping"; exit 1 }

      - name: üöÄ Run semgrep ERROR
        shell: pwsh
        run: |
          semgrep --config=auto --encoding=utf-8 . `
            --sarif --sarif-output="output-$env:UNIQ_STR-error.json" --severity=ERROR `
            --exclude-dir=node_modules --exclude-pattern="*.png" --exclude-pattern="*.jpg" --exclude-pattern="*.min.js"
          
          if (Test-Path "output-$env:UNIQ_STR-error.json") {
            jq '.runs[].results[] |= (.properties["security-severity"] = "7.0")' `
              "output-$env:UNIQ_STR-error.json" | Set-Content -Encoding utf8 "output-$env:UNIQ_STR-error.sarif"
          } else { Write-Host "ERROR SARIF not generated, skipping"; exit 1 }

      - name: üîó Aggregate SARIF
        shell: pwsh
        run: |
          jq -s '{
            version: (.[0].version),
            runs: [
              {
                invocations: (map(.runs[].invocations) | add),
                results: (map(.runs[].results) | add),
                tool: {
                  driver: {
                    name: (.[0].runs[0].tool.driver.name),
                    rules: (map(.runs[].tool.driver.rules) | add),
                    semanticVersion: (.[0].runs[0].tool.driver.semanticVersion)
                  }
                }
              }
            ],
            "$schema": (.[0]."$schema")
          }' "output-$env:UNIQ_STR-"*.sarif | Set-Content -Encoding utf8 "semgrep-report-temp.sarif"

      - name: üíæ Normalize SARIF for GitHub Security
        shell: pwsh
        run: |
          jq '.runs[0].tool.driver.name = "Semgrep"' semgrep-report-temp.sarif | Set-Content -Encoding utf8 semgrep-report-temp-temp.sarif
          jq '.runs[0].tool.driver.rules |= map(
            if .defaultConfiguration.level == "note" then .properties.severity = "MEDIUM"
            elif .defaultConfiguration.level == "warning" then .properties.severity = "HIGH"
            elif .defaultConfiguration.level == "error" then .properties.severity = "CRITICAL"
            else . end
          )' semgrep-report-temp-temp.sarif | Set-Content -Encoding utf8 semgrep-report-temp.sarif
          jq '.runs[0].tool.driver.rules |= map(del(.defaultConfiguration))' semgrep-report-temp.sarif | Set-Content -Encoding utf8 semgrep-report.sarif
          Add-Content -Encoding UTF8 $env:GITHUB_OUTPUT "tab_security_github=$env:PERSO_GIT${{ github.event.repository.name }}/security/code-scanning"

      - name: ‚¨ÜÔ∏è Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-report.sarif
          category: semgrep-sast-analysis
          ref: ${{ github.ref }}
          sha: ${{ github.sha }}

      - name: üîÑ Count vulnerabilities
        shell: pwsh
        run: |
          $count = (jq '.runs[0].results | length' semgrep-report.sarif)
          Add-Content -Encoding UTF8 $env:GITHUB_ENV "VULN_COUNT=$count"
          Write-Host "Nombre de vuln√©rabilit√©s : $count"

      - name: ‚úÖ Fail or pass pipeline
        shell: pwsh
        run: |
          if ($env:VULN_COUNT -gt 0) { exit 1 }
          else { Write-Host "‚úÖ Aucune vuln√©rabilit√© d√©tect√©e" }

          
